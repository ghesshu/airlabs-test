{"version":3,"file":"static/js/90.301a4b26.chunk.js","mappings":"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","sources":["Pages/ReadPost.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\n// import Hero from \"../Components/Hero\";\nimport Footer from \"../Layout/Footer\";\nimport DonateBar from \"../Components/DonateBar\";\nimport Navbar from \"../Layout/Navbar\";\nimport bg1 from \"../Assets/blog/bg2.JPG\";\nimport { ApiCall } from \"../functions/ApiCall\";\nimport { TokenContext } from \"../functions/TokenContext\";\nimport { UrlContext } from \"../functions/UrlContext\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst ReadPost = () => {\n  const { id } = useParams();\n  const { readPost } = useContext(ApiCall);\n  const { url } = useContext(UrlContext);\n  const { token } = useContext(TokenContext);\n  const [dataP, setDataP] = useState({});\n  const [pContent, setPContent] = useState([]);\n\n  function splitTextIntoParagraphs(passage) {\n    // Split the passage into sentences using regular expressions.\n    const sentences = passage?.match(/[^.!?]+[.!?]+/g);\n\n    // Initialize variables.\n    const chunks = [];\n    let currentChunk = \"\";\n\n    if (passage) {\n      // Iterate through sentences and create chunks.\n      for (const sentence of sentences) {\n        // Check if adding the current sentence to the current chunk exceeds 100 words.\n        if (\n          currentChunk.split(\" \").length + sentence.split(\" \").length <=\n          100\n        ) {\n          currentChunk += sentence;\n        } else {\n          // Add the current chunk to the list of chunks.\n          chunks.push(currentChunk);\n          currentChunk = sentence;\n        }\n      }\n\n      // Add any remaining text as the last chunk.\n      if (currentChunk) {\n        chunks.push(currentChunk);\n      }\n\n      return chunks;\n    }\n  }\n\n  useEffect(() => {\n    const load = async () => {\n      const response = await readPost(id);\n      // console.log(id);\n      setDataP(response.post);\n      const paragraphs = splitTextIntoParagraphs(dataP.content);\n      setPContent(paragraphs);\n      //  console.log(paragraphs);\n    };\n    load();\n  }, [dataP]);\n\n  return (\n    <div className='w-screen'>\n      <div className='fixed w-full text-black z-10'>\n        <Navbar />\n      </div>\n\n      <div className=''>\n        <div className=''>\n          <div className='relative'>\n            <img\n              src={dataP.img_url}\n              alt=''\n              className='h-[35rem] object-cover w-screen'\n            />\n            <div className=' bg-black/50 absolute top-0 w-full h-full flex items-center justify-center'>\n              <h1 className='text-white font-bold text-3xl tracking-widest'>\n                {dataP?.title?.toUpperCase()}\n              </h1>\n            </div>\n          </div>\n\n          <div className='flex w-full items-center justify-center'>\n            <div className='my-24 mx-2 max-w-[50rem]'>\n              <h1 className=' font-bold text-3xl tracking-widest'>\n                {dataP?.title?.toUpperCase()}\n              </h1>\n\n              <div className='flex flex-col gap-8 '>\n                {pContent?.map((data, index) => (\n                  <p className='text-justify my-4 text-md '>{data}</p>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=''>\n        {\" \"}\n        <DonateBar />\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default ReadPost;\n"],"names":["_dataP$title","_dataP$title2","id","useParams","readPost","useContext","ApiCall","_useState","UrlContext","url","TokenContext","token","useState","_useState2","_slicedToArray","dataP","setDataP","_useState3","_useState4","pContent","setPContent","splitTextIntoParagraphs","passage","sentences","match","chunks","currentChunk","_step","_iterator","_createForOfIteratorHelper","s","n","done","sentence","value","split","length","push","err","e","f","useEffect","load","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","paragraphs","wrap","_context","prev","next","sent","post","content","stop","apply","arguments","_jsxs","className","children","_jsx","Navbar","src","img_url","alt","title","toUpperCase","map","data","index","DonateBar","Footer"],"sourceRoot":""}